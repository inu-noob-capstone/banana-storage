1. 
main.py에서는
setting 객체를 생성하여, 글로벌 변수에 담아둔다.

그리고, autoCheck, printSetting 등의 함수에서 setting 객체에 글로벌 변수를 이용해 접근한다. 이거 괜찮은 것인가?

이렇게 만든 이유는, 함수의 scope 바깥에 존재하는 객체의 멤버 변수를 수정할 필요가 있어서다.

그냥 객체를 전달하니 call by value로 전달되더라, 함수 내에서 객체 정보를 수정해도, main 쪽의 code block에서 적용되지 않는다.

파이썬에 포인터가 없어서 어떻게 할까 고민하던 차에, 객체를 global 변수에 담아서 전달하니, call by reference처럼 잘 동작하더라.

다만, global 변수 사용을 지향하라는 말을 들어온터라, 이렇게 만드는 게 바람직한지는 잘 모르겠다. 



2. 
main.py 아랫 부분에는 관리 동작을 반복하는 while 문이 있다.

해당 부분에서는 3개의 스레드를 만들어서 사용하며, 상호배제도 이용한다.

다만, 이는 구현 과정에서 남아있는 미수정 코드다. 
(이렇게 짜놓은 이유는 궁금해한다면, 맨 밑에 설명을 참조해 구술)

각 스레드가, 뮤텍스 락을 얻어서 순차적으로 동작하며, 종료된다. 

사실상 main에서 스레드 없이, 각 함수가 1회씩 동작하고 꺼지는 것과 차이가 없다.

뮤텍스와 스레드 생성&삭제가 시스템 자원을 많이 소모하는가? (지금은 문제 없는데, 나중에 App과 통신할 때, 자원이 부족하면 이 부분부터 1순위로 바꿔야겠나?) 그리고, 단순 함수로 기능을 교체하려 했으나, 혹시 잘못 만졌다가, 문제 생기지 않을까 싶어서 현재는 그냥 둔 상태이다.

내가 파악한대로, 현재 스레드와 뮤텍스가 딱히 필요 없는 상황이 맞는가?


----------------------------------------------------------------------

스레드와 뮤텍스 이용한 이유:

3번 스레드는 setting 객체의 데이터를 출력하는 부분인데, 테스트 과정에서 값이 잘 수정되는 중인지 확인하기 위해서 넣어놨다.
콘솔 창에 값이 너무 자주 출력되면 확인이 곤란하므로, sleep() 메소드를 넣어놨다.

다만, 내가 값을 눈으로 확인하는 것과 별개로, 데이터 측정은 실시간에 가깝게, 더 빠르게 이루어지는 게 좋다고 생각했다.
main 스레드에서 각 함수를 모두 처리하면, 현 3번 스레드의 함수 부분이 데이터 측정이나, 다른 관리 동작을 block하므로, 그래서 출력부를 별개의 스레드로 분리하였다.

비슷한 이유로 키보드 입력도 마찬가지로 별개 스레드로 분리하였다. 데이터 측정 중이라고 프로세스를 못끄면 불편하지 않겠나?

아무튼 각 동작이 타 기능을 기다리지 않고 수행하도록 스레드로 구현했고, 공유자원인 setting에 접근하는 부분은 동기화를 위해 상호배제를 만들어두었다.

다만, 데이터 측정은 매우 빠르게 수행할 수 있는 반면, 전구 설정을 바꾸기 위한 브릿지와의 통신은 수준 이상으로 딜레이를 줄일 수 없었다. 

브릿지가 거부하는 것인지, 공유기가 거부하는 것인지는 모르겠으나, 너무 자주 HTTP 메세지를 보내니까 메시지가 전달되지 못했다.

결국 일정 수준 이하로 전구 동작을 줄이니, 이번에는 측정 데이터와 전구 밝기 변화가 동기화 되지 않는 문제가 생겼다. 온라인 게임에서의 네트워크 지연 현상(핑 차이)처럼 전구가 이전 데이터에 반응하여 엉뚱하게 동작하는 문제가 생겼다.

그래서 결국 측정-동작을 천천히 순차적으로 처리하게 만들었고, 그러고 나니, 콘솔에서 값을 보는데도 무리가 없어서.
최종적으로 측정-동작-출력 순으로 순차 처리하는 식으로 스레드 동작이 바뀌어버렸다.

이걸 main 내의 while문 안쪽에 합치니까, 메소드를 순차 호출하는 것과 다름 없게 되어버렸다. 이왕 이렇게 된 거 그냥 스레드와 뮤텍스 삭제하고 함수로 바꿔버릴까 하다가, 시간도 없고, 괜히 바꿨다가 혹시 다른 문제가 생기진 않을까 걱정되서 그냥 두었다. 현재로써 동작에 문제가 있지는 않다.  